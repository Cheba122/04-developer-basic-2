
WILL SEND A SCREENSHOT OF MY TABLE IN SLACK// Name	Alternative	Purpose	Description	Opensource?
Junit	JHipster	Crucial role in TDD, unit testing tool	Unit testing frame work for java.	yes
Selenium	Robot Framework	Catch bugs with your website or application using automated browser tests	Selenium is a portable framework for testing web applications. Selenium provides a playback tool for authoring functional tests without the need to learn a test scripting language. 	Yes
			
			Run in parallel and across browsers/platforms. Codeless automation, ideal for CI/CD pipelines.
Black Duck	Jfrog XRay	Security scan and identifies code quality risks that come from open source applications and containers	open source management solution, which fully discovers all open source in your code. It can map components to known vulnerabilities, and identify license and component quality risks	Yes
VS Code	Atom/Pycharm	Code editor that allows for debugging, task running and version control. Can run python!	source-code editor made by Microsoft for Windows, Linux and macOS. Features include support for debugging, syntax highlighting, intelligent code completion, snippets, code refactoring, and embedded Git.	Yes
Dockerhub	Red Hat Quay	Service provided by Docker for finding and sharing container images with your team	cloud-based repository in which Docker users and partners create, test, store and distribute container images. AKA Github of containers.	yes
Ubuntu	Debian	operating system on Linux for the enterprise server, desktop, cloud, and IoT.	Allows Linux VM to have a GUI interface	Yes
Github	Bitbucket	 Code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. 	Allows developers to commit and merge code to a single branch. 	Yes
Python		Object oriented programming language	Language of devops, AI, and data science	Yes //

1. In your own words describe 3 types of security testing and give an example of each?
	1. SAST - static application security testing: Scans code before it is complied. Takes place early in the SDLC before code is committed. An example is running a security scan on my password.py with Bandit Python Module before I commit my code in Github. (done during unit testing??)
	2. DAST - Dynamic Application Security Testing: Communicates through a website's front end to identify potential security vulnerabilities. Is done once code is live in production on a company's website (done during functional testing??)
	3. IAST - Interactive Application Security Testing: analyzes code for security vulnerabilities during automated QA testing. (done during integration testing???)
2. Is dependency management more or less important than security testings? Why or why not?
	I think dependency management is more important than security testing. For example if your website has a dependency on Adobe for it's images and you haven't properly managed that dependency, all of your website images could disappear if there's a change that's unmanaged to the adobe code. However, if you're website gets hacked because you have a vulnerability and it's down for hours due to a DNS attack, you could easily loose millions in revenue.
3. How does a dependency manager work? Why would we need one?
	A dependency manager works by working closely with software repositories (github, circle ci) and app stores. They can identify and resolve dependencies before code is deployed into production. They coordinate the integration of external libraries or packages into a larger application stack.
	We need one if our code depends on other libraries or applications. 
4. What are the 3 most important steps on the path to production?
	1. Build artifact - code!
	2. Deploy
Monitor?? - Security 


